import unittest
from day2 import count_safe_reports


class TestProcessReports(unittest.TestCase):
    def test_count_safe_reports(self):
        test_cases = [
            (['1 2 3 4'], 1),
            (['7 6 4 2 1'], 1),
            (['10 9 7 10 6'], 1),
            (['10 20 11 12'], 1),
            (['-20 1 2 3'], 1),
            (['9 7 6 2 1'], 0),
            (['1 3 6 7 9'], 1),
            (['1 3 3 7 9'], 0),
            (['1 3 3 3 5'], 0),
            (['1 2 3 5 10'], 1),
            (['-4 1 2 3 5 10'], 0),
            (['9 8 -20 7'], 1),
            (['8 10 13 14 15 18 21'], 1),
            (['64 65 67 68 69 72 74 76'], 1),
            (['6 9 12 14 16 19'], 1),
            (['1 3 2 4 9'], 0),
            (['1 3 2 4 9'], 0),
            (['19 13 10 10 7 4 7'], 0),
            (['12 8 5 4 4 3 2'], 0),
            (['16 13 12 8 5 1'], 0),
            (['100 2 3 4 5 6'], 1),
            (['1 100 3 4 5 6'], 1),
            (['1 2 3 100 5 6'], 1),
            (['1 2 3 4 100 6'], 1),
            (['1 2 3 4 5 100'], 1),
            (['1 1 3 4 5 6'], 1),
            (['1 2 2 4 5 6'], 1),
            (['1 2 3 3 5 6'], 1),
            (['1 2 3 4 4 6'], 1),
            (['6 5 4 3 2 1'], 1),
            (['6 6 4 3 2 1'], 1),
            (['6 5 5 3 2 1'], 1),
            (['6 5 4 4 2 1'], 1),
            (['6 5 4 3 3 1'], 1),
            (['6 5 4 3 2 2'], 1),
            (['6 5 4 3 1 1'], 1),
            (['-11 5 4 3 2 1'], 1),
            (['6 -11 4 3 2 1'], 1),
            (['6 5 -11 3 2 1'], 1),
            (['6 5 4 -11 2 1'], 1),
            (['6 5 4 3 -11 1'], 1),
            (['6 5 4 3 2 -11'], 1),
            (['11 5 4 3 2 1'], 1),
            (['6 11 4 3 2 1'], 1),
            (['6 5 11 3 2 1'], 1),
            (['6 5 4 11 2 1'], 1),
            (['6 5 4 3 11 1'], 1),
            (['6 5 4 3 2 11'], 1),
            (['12 9 7 5 2'], 1),
            (['7 6 4 2 1'], 1),
            (['1 2 7 8 9'], 0),
            (['9 7 6 2 1'], 0),
            (['1 3 2 4 5'], 1),
            (['8 6 4 4 1'], 1),
            (['1 3 6 7 9'], 1),
            (['1 3 6 7 9'], 1),
            (['-1 2 5 7 9'], 1),
            (['-1 -1 2 5 7 9'], 1),
            (['-1 2 5 7 -9'], 1),
            (['-1 2 -1 5 7'], 1),
            (['-1 2 1 2 5'], 1),
            (['7 5 -1 2 -1'], 1),
            (['5 2 1 2 -1'], 1),
            (['5 2 1 1 -1'], 1),
            (['5 4 5 3 2'], 1),
            (['5 4 2 4'], 1),
            (['5 4 3 2 1 2'], 1),
            (['13 11 9 6 4'], 1),
            (['29 32 34 36 39'], 1),
            (['9 11 14 15 16 18 21'], 1),
            (['9 11 14 14 15 16 18 21'], 1),
            (['9 11 14 15 16 18 21 21'], 1),
            (['1 1 1 1'], 0),
        ]

        for raw_data, expected in test_cases:
            with self.subTest(raw_data=raw_data, expected=expected):
                # Preprocess the string input into the required list of lists
                data = [list(map(int, line.split())) for line in raw_data]
                self.assertEqual(count_safe_reports(data), expected)


if __name__ == "__main__":
    unittest.main()
